AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  lambda-sandbag-go

  Sample SAM Template for lambda-sandbag-go

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 10

Parameters:
  NotificationBucket:
    Type: String
    Description: 通知を設定するS3バケット名
  S3NotificationLambdaFunctionName:
    Type: String
    Description: S3からの通知を受ける関数名
  Prefix:
    Type: String
    Description: 通知対象のファイルのPrefix(フォルダ等)
  QueueName:
    Type: String
  ReceiveMessageWaitTimeSeconds:
    Type: Number
  VisibilityTimeout:
    Type: Number
  AwsAccountNumber:
    Type: String
  SqsNotificationLambdaFunctionName:
    Type: String
    Description: SQSからの通知を受ける関数名
  SnsTopicName:
    Type: String

Resources:
  HelloWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: hello-world/
      Handler: hello-world
      Runtime: go1.x
      Architectures:
        - x86_64
      Events:
        CatchAll:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /hello
            Method: GET
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          PARAM1: VALUE

  S3NotificationLambdaFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: !Ref S3NotificationLambdaFunctionName
      CodeUri: s3-notification/
      Handler: s3-notification
      Role: !GetAtt LambdaIAMRole.Arn
      Runtime: go1.x
      Architectures:
        - x86_64

  LambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt S3NotificationLambdaFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: s3.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:aws:s3:::${NotificationBucket}"

  LambdaIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetBucketNotification"
                  - "s3:PutBucketNotification"
                Resource: !Sub "arn:aws:s3:::${NotificationBucket}"
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"

  CustomResourceLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LambdaIAMRole.Arn
      Code:
        ZipFile: |

          from __future__ import print_function
          import json
          import boto3
          import cfnresponse

          SUCCESS = "SUCCESS"
          FAILED = "FAILED"

          print('Loading function')
          s3 = boto3.resource('s3')

          def lambda_handler(event, context):
              print("Received event: " + json.dumps(event, indent=2))
              responseData={}
              try:
                  if event['RequestType'] == 'Delete':
                      print("Request Type:",event['RequestType'])
                      Bucket=event['ResourceProperties']['Bucket']
                      delete_notification(Bucket)
                      print("Sending response to custom resource after Delete")
                  elif event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                      print("Request Type:",event['RequestType'])
                      LambdaArn=event['ResourceProperties']['LambdaArn']
                      Bucket=event['ResourceProperties']['Bucket']
                      Prefix=event['ResourceProperties']['Prefix']
                      add_notification(LambdaArn, Bucket, Prefix)
                      responseData={'Bucket':Bucket}
                      print("Sending response to custom resource")
                  responseStatus = 'SUCCESS'
              except Exception as e:
                  print('Failed to process:', e)
                  responseStatus = 'FAILED'
                  responseData = {'Failure': 'Something bad happened.'}
              cfnresponse.send(event, context, responseStatus, responseData)

          def add_notification(LambdaArn, Bucket, Prefix):
              bucket_notification = s3.BucketNotification(Bucket)
              response = bucket_notification.put(
                NotificationConfiguration={
                  'LambdaFunctionConfigurations': [
                    {
                        'LambdaFunctionArn': LambdaArn,
                        'Events': [
                            's3:ObjectCreated:*'
                        ],
                        'Filter': {'Key': {'FilterRules': [
                          {'Name': 'Prefix', 'Value': Prefix}
                        ]}}
                    }
                  ]
                }
              )
              print("Put request completed....")

          def delete_notification(Bucket):
              bucket_notification = s3.BucketNotification(Bucket)
              response = bucket_notification.put(
                  NotificationConfiguration={}
              )
              print("Delete request completed....")
      Runtime: python3.9
      Timeout: 50

  LambdaTrigger:
    Type: "Custom::LambdaTrigger"
    DependsOn: LambdaInvokePermission
    Properties:
      ServiceToken: !GetAtt CustomResourceLambdaFunction.Arn
      LambdaArn: !GetAtt S3NotificationLambdaFunction.Arn
      Bucket: !Ref NotificationBucket
      Prefix: !Ref Prefix

  Queue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref QueueName
      ReceiveMessageWaitTimeSeconds: !Ref ReceiveMessageWaitTimeSeconds
      VisibilityTimeout: !Ref VisibilityTimeout

  SqsSendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: sqs-send-message/
      Handler: sqs-send-message
      Runtime: go1.x
      Architectures:
        - x86_64
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /sqsSendMessage
            Method: POST
      Environment:
        Variables:
          AWS_SQS_QUEUENAME: !Ref QueueName
          AWS_ACCOUNT_NUMBER: !Ref AwsAccountNumber
      Policies:
        - AmazonSQSFullAccess

  EventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      Enabled: true
      EventSourceArn: !GetAtt Queue.Arn
      FunctionName: !GetAtt SqsNotificationLambdaFunction.Arn
      BatchSize: 1

  SqsNotificationLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Ref SqsNotificationLambdaFunctionName
      CodeUri: sqs-notification/
      Handler: sqs-notification
      Role: !GetAtt SqsNotificationLambdaFunctionRole.Arn
      Runtime: go1.x
      Architectures:
        - x86_64

  SqsNotificationLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: sqs-access
          PolicyDocument:
            Statement:
              - Sid: 1
                Effect: Allow
                Action:
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ReceiveMessage
                Resource:
                  - !GetAtt Queue.Arn

  MySqsQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - "SQS:*"
            Effect: "Allow"
            Resource:
              Fn::GetAtt:
                - "Queue"
                - "Arn"
            Principal:
              AWS:
                - "*"
      Queues:
        - !Ref Queue

  SnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Ref SnsTopicName

  SnsSendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: sns-send-message/
      Handler: sns-send-message
      Runtime: go1.x
      Architectures:
        - x86_64
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /snsSendMessage
            Method: POST
      Environment:
        Variables:
          AWS_ACCOUNT_NUMBER: !Ref AwsAccountNumber
          AWS_SNS_TOPICNAME: !Ref SnsTopicName
      Policies:
        - AmazonSNSFullAccess
